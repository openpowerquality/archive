// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OpqProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "OpqProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* OpqPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpqPacket_reflection_ = NULL;
struct OpqPacketOneofInstance {
  const ::OpqPacket_Event* event_;
  const ::OpqPacket_Heartbeat* heartbeat_;
  const ::OpqPacket_Cmd* cmd_;
  const ::OpqPacket_CmdResp* cmdresp_;
}* OpqPacket_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* OpqPacket_Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpqPacket_Event_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpqPacket_Heartbeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpqPacket_Heartbeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpqPacket_Cmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpqPacket_Cmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpqPacket_CmdResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpqPacket_CmdResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpqPacket_DeviceId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpqPacket_DeviceId_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OpqPacket_EventType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OpqPacket_CmdType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_OpqProtocol_2eproto() {
  protobuf_AddDesc_OpqProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "OpqProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  OpqPacket_descriptor_ = file->message_type(0);
  static const int OpqPacket_offsets_[5] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(OpqPacket_default_oneof_instance_, event_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(OpqPacket_default_oneof_instance_, heartbeat_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(OpqPacket_default_oneof_instance_, cmd_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(OpqPacket_default_oneof_instance_, cmdresp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket, PacketType_),
  };
  OpqPacket_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpqPacket_descriptor_,
      OpqPacket::default_instance_,
      OpqPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket, _has_bits_[0]),
      -1,
      -1,
      OpqPacket_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket, _oneof_case_[0]),
      sizeof(OpqPacket),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket, _internal_metadata_),
      -1);
  OpqPacket_Event_descriptor_ = OpqPacket_descriptor_->nested_type(0);
  static const int OpqPacket_Event_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket_Event, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket_Event, secondssinceepoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket_Event, cyclcessincesecond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket_Event, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket_Event, waveform_),
  };
  OpqPacket_Event_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpqPacket_Event_descriptor_,
      OpqPacket_Event::default_instance_,
      OpqPacket_Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket_Event, _has_bits_[0]),
      -1,
      -1,
      sizeof(OpqPacket_Event),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket_Event, _internal_metadata_),
      -1);
  OpqPacket_Heartbeat_descriptor_ = OpqPacket_descriptor_->nested_type(1);
  static const int OpqPacket_Heartbeat_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket_Heartbeat, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket_Heartbeat, rms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket_Heartbeat, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket_Heartbeat, thd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket_Heartbeat, synch_),
  };
  OpqPacket_Heartbeat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpqPacket_Heartbeat_descriptor_,
      OpqPacket_Heartbeat::default_instance_,
      OpqPacket_Heartbeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket_Heartbeat, _has_bits_[0]),
      -1,
      -1,
      sizeof(OpqPacket_Heartbeat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket_Heartbeat, _internal_metadata_),
      -1);
  OpqPacket_Cmd_descriptor_ = OpqPacket_descriptor_->nested_type(2);
  static const int OpqPacket_Cmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket_Cmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket_Cmd, cmdtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket_Cmd, message_),
  };
  OpqPacket_Cmd_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpqPacket_Cmd_descriptor_,
      OpqPacket_Cmd::default_instance_,
      OpqPacket_Cmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket_Cmd, _has_bits_[0]),
      -1,
      -1,
      sizeof(OpqPacket_Cmd),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket_Cmd, _internal_metadata_),
      -1);
  OpqPacket_CmdResp_descriptor_ = OpqPacket_descriptor_->nested_type(3);
  static const int OpqPacket_CmdResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket_CmdResp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket_CmdResp, message_),
  };
  OpqPacket_CmdResp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpqPacket_CmdResp_descriptor_,
      OpqPacket_CmdResp::default_instance_,
      OpqPacket_CmdResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket_CmdResp, _has_bits_[0]),
      -1,
      -1,
      sizeof(OpqPacket_CmdResp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket_CmdResp, _internal_metadata_),
      -1);
  OpqPacket_DeviceId_descriptor_ = OpqPacket_descriptor_->nested_type(4);
  static const int OpqPacket_DeviceId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket_DeviceId, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket_DeviceId, devicekey_),
  };
  OpqPacket_DeviceId_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpqPacket_DeviceId_descriptor_,
      OpqPacket_DeviceId::default_instance_,
      OpqPacket_DeviceId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket_DeviceId, _has_bits_[0]),
      -1,
      -1,
      sizeof(OpqPacket_DeviceId),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpqPacket_DeviceId, _internal_metadata_),
      -1);
  OpqPacket_EventType_descriptor_ = OpqPacket_descriptor_->enum_type(0);
  OpqPacket_CmdType_descriptor_ = OpqPacket_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_OpqProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpqPacket_descriptor_, &OpqPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpqPacket_Event_descriptor_, &OpqPacket_Event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpqPacket_Heartbeat_descriptor_, &OpqPacket_Heartbeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpqPacket_Cmd_descriptor_, &OpqPacket_Cmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpqPacket_CmdResp_descriptor_, &OpqPacket_CmdResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpqPacket_DeviceId_descriptor_, &OpqPacket_DeviceId::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_OpqProtocol_2eproto() {
  delete OpqPacket::default_instance_;
  delete OpqPacket_default_oneof_instance_;
  delete OpqPacket_reflection_;
  delete OpqPacket_Event::default_instance_;
  delete OpqPacket_Event_reflection_;
  delete OpqPacket_Heartbeat::default_instance_;
  delete OpqPacket_Heartbeat_reflection_;
  delete OpqPacket_Cmd::default_instance_;
  delete OpqPacket_Cmd_reflection_;
  delete OpqPacket_CmdResp::default_instance_;
  delete OpqPacket_CmdResp_reflection_;
  delete OpqPacket_DeviceId::default_instance_;
  delete OpqPacket_DeviceId_reflection_;
}

void protobuf_AddDesc_OpqProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021OpqProtocol.proto\"\223\006\n\tOpqPacket\022!\n\005eve"
    "nt\030\001 \001(\0132\020.OpqPacket.EventH\000\022)\n\theartbea"
    "t\030\002 \001(\0132\024.OpqPacket.HeartbeatH\000\022\035\n\003cmd\030\003"
    " \001(\0132\016.OpqPacket.CmdH\000\022%\n\007cmdResp\030\004 \001(\0132"
    "\022.OpqPacket.CmdRespH\000\032\232\001\n\005Event\022\037\n\002id\030\001 "
    "\001(\0132\023.OpqPacket.DeviceId\022\031\n\021secondsSince"
    "Epoch\030\002 \001(\005\022\032\n\022cyclcesSinceSecond\030\003 \001(\005\022"
    "\'\n\teventType\030\004 \001(\0162\024.OpqPacket.EventType"
    "\022\020\n\010waveform\030\005 \003(\005\032n\n\tHeartbeat\022%\n\010devic"
    "eId\030\001 \001(\0132\023.OpqPacket.DeviceId\022\013\n\003rms\030\002 "
    "\001(\001\022\021\n\tfrequency\030\003 \001(\001\022\013\n\003thd\030\004 \001(\001\022\r\n\005s"
    "ynch\030\005 \003(\004\032\\\n\003Cmd\022\037\n\002id\030\001 \001(\0132\023.OpqPacke"
    "t.DeviceId\022#\n\007cmdType\030\002 \001(\0162\022.OpqPacket."
    "CmdType\022\017\n\007message\030\003 \001(\t\032;\n\007CmdResp\022\037\n\002i"
    "d\030\001 \001(\0132\023.OpqPacket.DeviceId\022\017\n\007message\030"
    "\002 \001(\t\032/\n\010DeviceId\022\020\n\010deviceId\030\001 \001(\003\022\021\n\td"
    "eviceKey\030\002 \001(\t\"0\n\tEventType\022\r\n\tFREQUENCY"
    "\020\000\022\013\n\007VOLTAGE\020\001\022\007\n\003THD\020\002\"Y\n\007CmdType\022\017\n\013K"
    "ILL_SERVER\020\000\022\022\n\016RESTART_DEVICE\020\001\022\024\n\020GET_"
    "REGISTER_MAP\020\002\022\023\n\017RUN_DIAGNOSTICS\020\003B\014\n\nP"
    "acketType", 809);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "OpqProtocol.proto", &protobuf_RegisterTypes);
  OpqPacket::default_instance_ = new OpqPacket();
  OpqPacket_default_oneof_instance_ = new OpqPacketOneofInstance();
  OpqPacket_Event::default_instance_ = new OpqPacket_Event();
  OpqPacket_Heartbeat::default_instance_ = new OpqPacket_Heartbeat();
  OpqPacket_Cmd::default_instance_ = new OpqPacket_Cmd();
  OpqPacket_CmdResp::default_instance_ = new OpqPacket_CmdResp();
  OpqPacket_DeviceId::default_instance_ = new OpqPacket_DeviceId();
  OpqPacket::default_instance_->InitAsDefaultInstance();
  OpqPacket_Event::default_instance_->InitAsDefaultInstance();
  OpqPacket_Heartbeat::default_instance_->InitAsDefaultInstance();
  OpqPacket_Cmd::default_instance_->InitAsDefaultInstance();
  OpqPacket_CmdResp::default_instance_->InitAsDefaultInstance();
  OpqPacket_DeviceId::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_OpqProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_OpqProtocol_2eproto {
  StaticDescriptorInitializer_OpqProtocol_2eproto() {
    protobuf_AddDesc_OpqProtocol_2eproto();
  }
} static_descriptor_initializer_OpqProtocol_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* OpqPacket_EventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpqPacket_EventType_descriptor_;
}
bool OpqPacket_EventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OpqPacket_EventType OpqPacket::FREQUENCY;
const OpqPacket_EventType OpqPacket::VOLTAGE;
const OpqPacket_EventType OpqPacket::THD;
const OpqPacket_EventType OpqPacket::EventType_MIN;
const OpqPacket_EventType OpqPacket::EventType_MAX;
const int OpqPacket::EventType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* OpqPacket_CmdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpqPacket_CmdType_descriptor_;
}
bool OpqPacket_CmdType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OpqPacket_CmdType OpqPacket::KILL_SERVER;
const OpqPacket_CmdType OpqPacket::RESTART_DEVICE;
const OpqPacket_CmdType OpqPacket::GET_REGISTER_MAP;
const OpqPacket_CmdType OpqPacket::RUN_DIAGNOSTICS;
const OpqPacket_CmdType OpqPacket::CmdType_MIN;
const OpqPacket_CmdType OpqPacket::CmdType_MAX;
const int OpqPacket::CmdType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int OpqPacket_Event::kIdFieldNumber;
const int OpqPacket_Event::kSecondsSinceEpochFieldNumber;
const int OpqPacket_Event::kCyclcesSinceSecondFieldNumber;
const int OpqPacket_Event::kEventTypeFieldNumber;
const int OpqPacket_Event::kWaveformFieldNumber;
#endif  // !_MSC_VER

OpqPacket_Event::OpqPacket_Event()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OpqPacket.Event)
}

void OpqPacket_Event::InitAsDefaultInstance() {
  id_ = const_cast< ::OpqPacket_DeviceId*>(&::OpqPacket_DeviceId::default_instance());
}

OpqPacket_Event::OpqPacket_Event(const OpqPacket_Event& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OpqPacket.Event)
}

void OpqPacket_Event::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  secondssinceepoch_ = 0;
  cyclcessincesecond_ = 0;
  eventtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpqPacket_Event::~OpqPacket_Event() {
  // @@protoc_insertion_point(destructor:OpqPacket.Event)
  SharedDtor();
}

void OpqPacket_Event::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
  }
}

void OpqPacket_Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpqPacket_Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpqPacket_Event_descriptor_;
}

const OpqPacket_Event& OpqPacket_Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OpqProtocol_2eproto();
  return *default_instance_;
}

OpqPacket_Event* OpqPacket_Event::default_instance_ = NULL;

OpqPacket_Event* OpqPacket_Event::New(::google::protobuf::Arena* arena) const {
  OpqPacket_Event* n = new OpqPacket_Event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpqPacket_Event::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OpqPacket_Event*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(secondssinceepoch_, cyclcessincesecond_);
    if (has_id()) {
      if (id_ != NULL) id_->::OpqPacket_DeviceId::Clear();
    }
    eventtype_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  waveform_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OpqPacket_Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OpqPacket.Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .OpqPacket.DeviceId id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_secondsSinceEpoch;
        break;
      }

      // optional int32 secondsSinceEpoch = 2;
      case 2: {
        if (tag == 16) {
         parse_secondsSinceEpoch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &secondssinceepoch_)));
          set_has_secondssinceepoch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cyclcesSinceSecond;
        break;
      }

      // optional int32 cyclcesSinceSecond = 3;
      case 3: {
        if (tag == 24) {
         parse_cyclcesSinceSecond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cyclcessincesecond_)));
          set_has_cyclcessincesecond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_eventType;
        break;
      }

      // optional .OpqPacket.EventType eventType = 4;
      case 4: {
        if (tag == 32) {
         parse_eventType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::OpqPacket_EventType_IsValid(value)) {
            set_eventtype(static_cast< ::OpqPacket_EventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_waveform;
        break;
      }

      // repeated int32 waveform = 5;
      case 5: {
        if (tag == 40) {
         parse_waveform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_waveform())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_waveform())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_waveform;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OpqPacket.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OpqPacket.Event)
  return false;
#undef DO_
}

void OpqPacket_Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OpqPacket.Event)
  // optional .OpqPacket.DeviceId id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional int32 secondsSinceEpoch = 2;
  if (has_secondssinceepoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->secondssinceepoch(), output);
  }

  // optional int32 cyclcesSinceSecond = 3;
  if (has_cyclcessincesecond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cyclcessincesecond(), output);
  }

  // optional .OpqPacket.EventType eventType = 4;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->eventtype(), output);
  }

  // repeated int32 waveform = 5;
  for (int i = 0; i < this->waveform_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->waveform(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OpqPacket.Event)
}

::google::protobuf::uint8* OpqPacket_Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpqPacket.Event)
  // optional .OpqPacket.DeviceId id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->id_, target);
  }

  // optional int32 secondsSinceEpoch = 2;
  if (has_secondssinceepoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->secondssinceepoch(), target);
  }

  // optional int32 cyclcesSinceSecond = 3;
  if (has_cyclcessincesecond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cyclcessincesecond(), target);
  }

  // optional .OpqPacket.EventType eventType = 4;
  if (has_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->eventtype(), target);
  }

  // repeated int32 waveform = 5;
  for (int i = 0; i < this->waveform_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->waveform(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpqPacket.Event)
  return target;
}

int OpqPacket_Event::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15) {
    // optional .OpqPacket.DeviceId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional int32 secondsSinceEpoch = 2;
    if (has_secondssinceepoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->secondssinceepoch());
    }

    // optional int32 cyclcesSinceSecond = 3;
    if (has_cyclcessincesecond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cyclcessincesecond());
    }

    // optional .OpqPacket.EventType eventType = 4;
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eventtype());
    }

  }
  // repeated int32 waveform = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->waveform_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->waveform(i));
    }
    total_size += 1 * this->waveform_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpqPacket_Event::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OpqPacket_Event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpqPacket_Event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpqPacket_Event::MergeFrom(const OpqPacket_Event& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  waveform_.MergeFrom(from.waveform_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::OpqPacket_DeviceId::MergeFrom(from.id());
    }
    if (from.has_secondssinceepoch()) {
      set_secondssinceepoch(from.secondssinceepoch());
    }
    if (from.has_cyclcessincesecond()) {
      set_cyclcessincesecond(from.cyclcessincesecond());
    }
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OpqPacket_Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpqPacket_Event::CopyFrom(const OpqPacket_Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpqPacket_Event::IsInitialized() const {

  return true;
}

void OpqPacket_Event::Swap(OpqPacket_Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpqPacket_Event::InternalSwap(OpqPacket_Event* other) {
  std::swap(id_, other->id_);
  std::swap(secondssinceepoch_, other->secondssinceepoch_);
  std::swap(cyclcessincesecond_, other->cyclcessincesecond_);
  std::swap(eventtype_, other->eventtype_);
  waveform_.UnsafeArenaSwap(&other->waveform_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpqPacket_Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpqPacket_Event_descriptor_;
  metadata.reflection = OpqPacket_Event_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OpqPacket_Heartbeat::kDeviceIdFieldNumber;
const int OpqPacket_Heartbeat::kRmsFieldNumber;
const int OpqPacket_Heartbeat::kFrequencyFieldNumber;
const int OpqPacket_Heartbeat::kThdFieldNumber;
const int OpqPacket_Heartbeat::kSynchFieldNumber;
#endif  // !_MSC_VER

OpqPacket_Heartbeat::OpqPacket_Heartbeat()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OpqPacket.Heartbeat)
}

void OpqPacket_Heartbeat::InitAsDefaultInstance() {
  deviceid_ = const_cast< ::OpqPacket_DeviceId*>(&::OpqPacket_DeviceId::default_instance());
}

OpqPacket_Heartbeat::OpqPacket_Heartbeat(const OpqPacket_Heartbeat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OpqPacket.Heartbeat)
}

void OpqPacket_Heartbeat::SharedCtor() {
  _cached_size_ = 0;
  deviceid_ = NULL;
  rms_ = 0;
  frequency_ = 0;
  thd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpqPacket_Heartbeat::~OpqPacket_Heartbeat() {
  // @@protoc_insertion_point(destructor:OpqPacket.Heartbeat)
  SharedDtor();
}

void OpqPacket_Heartbeat::SharedDtor() {
  if (this != default_instance_) {
    delete deviceid_;
  }
}

void OpqPacket_Heartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpqPacket_Heartbeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpqPacket_Heartbeat_descriptor_;
}

const OpqPacket_Heartbeat& OpqPacket_Heartbeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OpqProtocol_2eproto();
  return *default_instance_;
}

OpqPacket_Heartbeat* OpqPacket_Heartbeat::default_instance_ = NULL;

OpqPacket_Heartbeat* OpqPacket_Heartbeat::New(::google::protobuf::Arena* arena) const {
  OpqPacket_Heartbeat* n = new OpqPacket_Heartbeat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpqPacket_Heartbeat::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OpqPacket_Heartbeat*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(rms_, thd_);
    if (has_deviceid()) {
      if (deviceid_ != NULL) deviceid_->::OpqPacket_DeviceId::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  synch_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OpqPacket_Heartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OpqPacket.Heartbeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .OpqPacket.DeviceId deviceId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deviceid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_rms;
        break;
      }

      // optional double rms = 2;
      case 2: {
        if (tag == 17) {
         parse_rms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rms_)));
          set_has_rms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_frequency;
        break;
      }

      // optional double frequency = 3;
      case 3: {
        if (tag == 25) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_thd;
        break;
      }

      // optional double thd = 4;
      case 4: {
        if (tag == 33) {
         parse_thd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &thd_)));
          set_has_thd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_synch;
        break;
      }

      // repeated uint64 synch = 5;
      case 5: {
        if (tag == 40) {
         parse_synch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_synch())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_synch())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_synch;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OpqPacket.Heartbeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OpqPacket.Heartbeat)
  return false;
#undef DO_
}

void OpqPacket_Heartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OpqPacket.Heartbeat)
  // optional .OpqPacket.DeviceId deviceId = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->deviceid_, output);
  }

  // optional double rms = 2;
  if (has_rms()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->rms(), output);
  }

  // optional double frequency = 3;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->frequency(), output);
  }

  // optional double thd = 4;
  if (has_thd()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->thd(), output);
  }

  // repeated uint64 synch = 5;
  for (int i = 0; i < this->synch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->synch(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OpqPacket.Heartbeat)
}

::google::protobuf::uint8* OpqPacket_Heartbeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpqPacket.Heartbeat)
  // optional .OpqPacket.DeviceId deviceId = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->deviceid_, target);
  }

  // optional double rms = 2;
  if (has_rms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->rms(), target);
  }

  // optional double frequency = 3;
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->frequency(), target);
  }

  // optional double thd = 4;
  if (has_thd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->thd(), target);
  }

  // repeated uint64 synch = 5;
  for (int i = 0; i < this->synch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->synch(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpqPacket.Heartbeat)
  return target;
}

int OpqPacket_Heartbeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15) {
    // optional .OpqPacket.DeviceId deviceId = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->deviceid_);
    }

    // optional double rms = 2;
    if (has_rms()) {
      total_size += 1 + 8;
    }

    // optional double frequency = 3;
    if (has_frequency()) {
      total_size += 1 + 8;
    }

    // optional double thd = 4;
    if (has_thd()) {
      total_size += 1 + 8;
    }

  }
  // repeated uint64 synch = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->synch_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->synch(i));
    }
    total_size += 1 * this->synch_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpqPacket_Heartbeat::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OpqPacket_Heartbeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpqPacket_Heartbeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpqPacket_Heartbeat::MergeFrom(const OpqPacket_Heartbeat& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  synch_.MergeFrom(from.synch_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      mutable_deviceid()->::OpqPacket_DeviceId::MergeFrom(from.deviceid());
    }
    if (from.has_rms()) {
      set_rms(from.rms());
    }
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
    if (from.has_thd()) {
      set_thd(from.thd());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OpqPacket_Heartbeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpqPacket_Heartbeat::CopyFrom(const OpqPacket_Heartbeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpqPacket_Heartbeat::IsInitialized() const {

  return true;
}

void OpqPacket_Heartbeat::Swap(OpqPacket_Heartbeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpqPacket_Heartbeat::InternalSwap(OpqPacket_Heartbeat* other) {
  std::swap(deviceid_, other->deviceid_);
  std::swap(rms_, other->rms_);
  std::swap(frequency_, other->frequency_);
  std::swap(thd_, other->thd_);
  synch_.UnsafeArenaSwap(&other->synch_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpqPacket_Heartbeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpqPacket_Heartbeat_descriptor_;
  metadata.reflection = OpqPacket_Heartbeat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OpqPacket_Cmd::kIdFieldNumber;
const int OpqPacket_Cmd::kCmdTypeFieldNumber;
const int OpqPacket_Cmd::kMessageFieldNumber;
#endif  // !_MSC_VER

OpqPacket_Cmd::OpqPacket_Cmd()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OpqPacket.Cmd)
}

void OpqPacket_Cmd::InitAsDefaultInstance() {
  id_ = const_cast< ::OpqPacket_DeviceId*>(&::OpqPacket_DeviceId::default_instance());
}

OpqPacket_Cmd::OpqPacket_Cmd(const OpqPacket_Cmd& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OpqPacket.Cmd)
}

void OpqPacket_Cmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = NULL;
  cmdtype_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpqPacket_Cmd::~OpqPacket_Cmd() {
  // @@protoc_insertion_point(destructor:OpqPacket.Cmd)
  SharedDtor();
}

void OpqPacket_Cmd::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete id_;
  }
}

void OpqPacket_Cmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpqPacket_Cmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpqPacket_Cmd_descriptor_;
}

const OpqPacket_Cmd& OpqPacket_Cmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OpqProtocol_2eproto();
  return *default_instance_;
}

OpqPacket_Cmd* OpqPacket_Cmd::default_instance_ = NULL;

OpqPacket_Cmd* OpqPacket_Cmd::New(::google::protobuf::Arena* arena) const {
  OpqPacket_Cmd* n = new OpqPacket_Cmd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpqPacket_Cmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_id()) {
      if (id_ != NULL) id_->::OpqPacket_DeviceId::Clear();
    }
    cmdtype_ = 0;
    if (has_message()) {
      message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OpqPacket_Cmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OpqPacket.Cmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .OpqPacket.DeviceId id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cmdType;
        break;
      }

      // optional .OpqPacket.CmdType cmdType = 2;
      case 2: {
        if (tag == 16) {
         parse_cmdType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::OpqPacket_CmdType_IsValid(value)) {
            set_cmdtype(static_cast< ::OpqPacket_CmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // optional string message = 3;
      case 3: {
        if (tag == 26) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "OpqPacket.Cmd.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OpqPacket.Cmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OpqPacket.Cmd)
  return false;
#undef DO_
}

void OpqPacket_Cmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OpqPacket.Cmd)
  // optional .OpqPacket.DeviceId id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional .OpqPacket.CmdType cmdType = 2;
  if (has_cmdtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cmdtype(), output);
  }

  // optional string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OpqPacket.Cmd.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OpqPacket.Cmd)
}

::google::protobuf::uint8* OpqPacket_Cmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpqPacket.Cmd)
  // optional .OpqPacket.DeviceId id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->id_, target);
  }

  // optional .OpqPacket.CmdType cmdType = 2;
  if (has_cmdtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cmdtype(), target);
  }

  // optional string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OpqPacket.Cmd.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpqPacket.Cmd)
  return target;
}

int OpqPacket_Cmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7) {
    // optional .OpqPacket.DeviceId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .OpqPacket.CmdType cmdType = 2;
    if (has_cmdtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdtype());
    }

    // optional string message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpqPacket_Cmd::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OpqPacket_Cmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpqPacket_Cmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpqPacket_Cmd::MergeFrom(const OpqPacket_Cmd& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::OpqPacket_DeviceId::MergeFrom(from.id());
    }
    if (from.has_cmdtype()) {
      set_cmdtype(from.cmdtype());
    }
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OpqPacket_Cmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpqPacket_Cmd::CopyFrom(const OpqPacket_Cmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpqPacket_Cmd::IsInitialized() const {

  return true;
}

void OpqPacket_Cmd::Swap(OpqPacket_Cmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpqPacket_Cmd::InternalSwap(OpqPacket_Cmd* other) {
  std::swap(id_, other->id_);
  std::swap(cmdtype_, other->cmdtype_);
  message_.Swap(&other->message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpqPacket_Cmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpqPacket_Cmd_descriptor_;
  metadata.reflection = OpqPacket_Cmd_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OpqPacket_CmdResp::kIdFieldNumber;
const int OpqPacket_CmdResp::kMessageFieldNumber;
#endif  // !_MSC_VER

OpqPacket_CmdResp::OpqPacket_CmdResp()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OpqPacket.CmdResp)
}

void OpqPacket_CmdResp::InitAsDefaultInstance() {
  id_ = const_cast< ::OpqPacket_DeviceId*>(&::OpqPacket_DeviceId::default_instance());
}

OpqPacket_CmdResp::OpqPacket_CmdResp(const OpqPacket_CmdResp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OpqPacket.CmdResp)
}

void OpqPacket_CmdResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = NULL;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpqPacket_CmdResp::~OpqPacket_CmdResp() {
  // @@protoc_insertion_point(destructor:OpqPacket.CmdResp)
  SharedDtor();
}

void OpqPacket_CmdResp::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete id_;
  }
}

void OpqPacket_CmdResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpqPacket_CmdResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpqPacket_CmdResp_descriptor_;
}

const OpqPacket_CmdResp& OpqPacket_CmdResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OpqProtocol_2eproto();
  return *default_instance_;
}

OpqPacket_CmdResp* OpqPacket_CmdResp::default_instance_ = NULL;

OpqPacket_CmdResp* OpqPacket_CmdResp::New(::google::protobuf::Arena* arena) const {
  OpqPacket_CmdResp* n = new OpqPacket_CmdResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpqPacket_CmdResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_id()) {
      if (id_ != NULL) id_->::OpqPacket_DeviceId::Clear();
    }
    if (has_message()) {
      message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OpqPacket_CmdResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OpqPacket.CmdResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .OpqPacket.DeviceId id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "OpqPacket.CmdResp.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OpqPacket.CmdResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OpqPacket.CmdResp)
  return false;
#undef DO_
}

void OpqPacket_CmdResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OpqPacket.CmdResp)
  // optional .OpqPacket.DeviceId id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OpqPacket.CmdResp.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OpqPacket.CmdResp)
}

::google::protobuf::uint8* OpqPacket_CmdResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpqPacket.CmdResp)
  // optional .OpqPacket.DeviceId id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->id_, target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OpqPacket.CmdResp.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpqPacket.CmdResp)
  return target;
}

int OpqPacket_CmdResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional .OpqPacket.DeviceId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpqPacket_CmdResp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OpqPacket_CmdResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpqPacket_CmdResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpqPacket_CmdResp::MergeFrom(const OpqPacket_CmdResp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::OpqPacket_DeviceId::MergeFrom(from.id());
    }
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OpqPacket_CmdResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpqPacket_CmdResp::CopyFrom(const OpqPacket_CmdResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpqPacket_CmdResp::IsInitialized() const {

  return true;
}

void OpqPacket_CmdResp::Swap(OpqPacket_CmdResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpqPacket_CmdResp::InternalSwap(OpqPacket_CmdResp* other) {
  std::swap(id_, other->id_);
  message_.Swap(&other->message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpqPacket_CmdResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpqPacket_CmdResp_descriptor_;
  metadata.reflection = OpqPacket_CmdResp_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OpqPacket_DeviceId::kDeviceIdFieldNumber;
const int OpqPacket_DeviceId::kDeviceKeyFieldNumber;
#endif  // !_MSC_VER

OpqPacket_DeviceId::OpqPacket_DeviceId()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OpqPacket.DeviceId)
}

void OpqPacket_DeviceId::InitAsDefaultInstance() {
}

OpqPacket_DeviceId::OpqPacket_DeviceId(const OpqPacket_DeviceId& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OpqPacket.DeviceId)
}

void OpqPacket_DeviceId::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = GOOGLE_LONGLONG(0);
  devicekey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpqPacket_DeviceId::~OpqPacket_DeviceId() {
  // @@protoc_insertion_point(destructor:OpqPacket.DeviceId)
  SharedDtor();
}

void OpqPacket_DeviceId::SharedDtor() {
  devicekey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void OpqPacket_DeviceId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpqPacket_DeviceId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpqPacket_DeviceId_descriptor_;
}

const OpqPacket_DeviceId& OpqPacket_DeviceId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OpqProtocol_2eproto();
  return *default_instance_;
}

OpqPacket_DeviceId* OpqPacket_DeviceId::default_instance_ = NULL;

OpqPacket_DeviceId* OpqPacket_DeviceId::New(::google::protobuf::Arena* arena) const {
  OpqPacket_DeviceId* n = new OpqPacket_DeviceId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpqPacket_DeviceId::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    deviceid_ = GOOGLE_LONGLONG(0);
    if (has_devicekey()) {
      devicekey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OpqPacket_DeviceId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OpqPacket.DeviceId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 deviceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_deviceKey;
        break;
      }

      // optional string deviceKey = 2;
      case 2: {
        if (tag == 18) {
         parse_deviceKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicekey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicekey().data(), this->devicekey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "OpqPacket.DeviceId.deviceKey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OpqPacket.DeviceId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OpqPacket.DeviceId)
  return false;
#undef DO_
}

void OpqPacket_DeviceId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OpqPacket.DeviceId)
  // optional int64 deviceId = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->deviceid(), output);
  }

  // optional string deviceKey = 2;
  if (has_devicekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicekey().data(), this->devicekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OpqPacket.DeviceId.deviceKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->devicekey(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OpqPacket.DeviceId)
}

::google::protobuf::uint8* OpqPacket_DeviceId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpqPacket.DeviceId)
  // optional int64 deviceId = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->deviceid(), target);
  }

  // optional string deviceKey = 2;
  if (has_devicekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicekey().data(), this->devicekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OpqPacket.DeviceId.deviceKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->devicekey(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpqPacket.DeviceId)
  return target;
}

int OpqPacket_DeviceId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional int64 deviceId = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->deviceid());
    }

    // optional string deviceKey = 2;
    if (has_devicekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicekey());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpqPacket_DeviceId::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OpqPacket_DeviceId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpqPacket_DeviceId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpqPacket_DeviceId::MergeFrom(const OpqPacket_DeviceId& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_devicekey()) {
      set_has_devicekey();
      devicekey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicekey_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OpqPacket_DeviceId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpqPacket_DeviceId::CopyFrom(const OpqPacket_DeviceId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpqPacket_DeviceId::IsInitialized() const {

  return true;
}

void OpqPacket_DeviceId::Swap(OpqPacket_DeviceId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpqPacket_DeviceId::InternalSwap(OpqPacket_DeviceId* other) {
  std::swap(deviceid_, other->deviceid_);
  devicekey_.Swap(&other->devicekey_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpqPacket_DeviceId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpqPacket_DeviceId_descriptor_;
  metadata.reflection = OpqPacket_DeviceId_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OpqPacket::kEventFieldNumber;
const int OpqPacket::kHeartbeatFieldNumber;
const int OpqPacket::kCmdFieldNumber;
const int OpqPacket::kCmdRespFieldNumber;
#endif  // !_MSC_VER

OpqPacket::OpqPacket()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OpqPacket)
}

void OpqPacket::InitAsDefaultInstance() {
  OpqPacket_default_oneof_instance_->event_ = const_cast< ::OpqPacket_Event*>(&::OpqPacket_Event::default_instance());
  OpqPacket_default_oneof_instance_->heartbeat_ = const_cast< ::OpqPacket_Heartbeat*>(&::OpqPacket_Heartbeat::default_instance());
  OpqPacket_default_oneof_instance_->cmd_ = const_cast< ::OpqPacket_Cmd*>(&::OpqPacket_Cmd::default_instance());
  OpqPacket_default_oneof_instance_->cmdresp_ = const_cast< ::OpqPacket_CmdResp*>(&::OpqPacket_CmdResp::default_instance());
}

OpqPacket::OpqPacket(const OpqPacket& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OpqPacket)
}

void OpqPacket::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_PacketType();
}

OpqPacket::~OpqPacket() {
  // @@protoc_insertion_point(destructor:OpqPacket)
  SharedDtor();
}

void OpqPacket::SharedDtor() {
  if (has_PacketType()) {
    clear_PacketType();
  }
  if (this != default_instance_) {
  }
}

void OpqPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpqPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpqPacket_descriptor_;
}

const OpqPacket& OpqPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OpqProtocol_2eproto();
  return *default_instance_;
}

OpqPacket* OpqPacket::default_instance_ = NULL;

OpqPacket* OpqPacket::New(::google::protobuf::Arena* arena) const {
  OpqPacket* n = new OpqPacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpqPacket::clear_PacketType() {
  switch(PacketType_case()) {
    case kEvent: {
      delete PacketType_.event_;
      break;
    }
    case kHeartbeat: {
      delete PacketType_.heartbeat_;
      break;
    }
    case kCmd: {
      delete PacketType_.cmd_;
      break;
    }
    case kCmdResp: {
      delete PacketType_.cmdresp_;
      break;
    }
    case PACKETTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PACKETTYPE_NOT_SET;
}


void OpqPacket::Clear() {
  clear_PacketType();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OpqPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OpqPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .OpqPacket.Event event = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_heartbeat;
        break;
      }

      // optional .OpqPacket.Heartbeat heartbeat = 2;
      case 2: {
        if (tag == 18) {
         parse_heartbeat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heartbeat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cmd;
        break;
      }

      // optional .OpqPacket.Cmd cmd = 3;
      case 3: {
        if (tag == 26) {
         parse_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cmdResp;
        break;
      }

      // optional .OpqPacket.CmdResp cmdResp = 4;
      case 4: {
        if (tag == 34) {
         parse_cmdResp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmdresp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OpqPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OpqPacket)
  return false;
#undef DO_
}

void OpqPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OpqPacket)
  // optional .OpqPacket.Event event = 1;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *PacketType_.event_, output);
  }

  // optional .OpqPacket.Heartbeat heartbeat = 2;
  if (has_heartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *PacketType_.heartbeat_, output);
  }

  // optional .OpqPacket.Cmd cmd = 3;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *PacketType_.cmd_, output);
  }

  // optional .OpqPacket.CmdResp cmdResp = 4;
  if (has_cmdresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *PacketType_.cmdresp_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OpqPacket)
}

::google::protobuf::uint8* OpqPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpqPacket)
  // optional .OpqPacket.Event event = 1;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *PacketType_.event_, target);
  }

  // optional .OpqPacket.Heartbeat heartbeat = 2;
  if (has_heartbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *PacketType_.heartbeat_, target);
  }

  // optional .OpqPacket.Cmd cmd = 3;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *PacketType_.cmd_, target);
  }

  // optional .OpqPacket.CmdResp cmdResp = 4;
  if (has_cmdresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *PacketType_.cmdresp_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpqPacket)
  return target;
}

int OpqPacket::ByteSize() const {
  int total_size = 0;

  switch (PacketType_case()) {
    // optional .OpqPacket.Event event = 1;
    case kEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *PacketType_.event_);
      break;
    }
    // optional .OpqPacket.Heartbeat heartbeat = 2;
    case kHeartbeat: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *PacketType_.heartbeat_);
      break;
    }
    // optional .OpqPacket.Cmd cmd = 3;
    case kCmd: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *PacketType_.cmd_);
      break;
    }
    // optional .OpqPacket.CmdResp cmdResp = 4;
    case kCmdResp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *PacketType_.cmdresp_);
      break;
    }
    case PACKETTYPE_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpqPacket::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OpqPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpqPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpqPacket::MergeFrom(const OpqPacket& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.PacketType_case()) {
    case kEvent: {
      mutable_event()->::OpqPacket_Event::MergeFrom(from.event());
      break;
    }
    case kHeartbeat: {
      mutable_heartbeat()->::OpqPacket_Heartbeat::MergeFrom(from.heartbeat());
      break;
    }
    case kCmd: {
      mutable_cmd()->::OpqPacket_Cmd::MergeFrom(from.cmd());
      break;
    }
    case kCmdResp: {
      mutable_cmdresp()->::OpqPacket_CmdResp::MergeFrom(from.cmdresp());
      break;
    }
    case PACKETTYPE_NOT_SET: {
      break;
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OpqPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpqPacket::CopyFrom(const OpqPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpqPacket::IsInitialized() const {

  return true;
}

void OpqPacket::Swap(OpqPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpqPacket::InternalSwap(OpqPacket* other) {
  std::swap(PacketType_, other->PacketType_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpqPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpqPacket_descriptor_;
  metadata.reflection = OpqPacket_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpqPacket_Event

// optional .OpqPacket.DeviceId id = 1;
 bool OpqPacket_Event::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void OpqPacket_Event::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
 void OpqPacket_Event::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
 void OpqPacket_Event::clear_id() {
  if (id_ != NULL) id_->::OpqPacket_DeviceId::Clear();
  clear_has_id();
}
 const ::OpqPacket_DeviceId& OpqPacket_Event::id() const {
  // @@protoc_insertion_point(field_get:OpqPacket.Event.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
 ::OpqPacket_DeviceId* OpqPacket_Event::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::OpqPacket_DeviceId;
  }
  // @@protoc_insertion_point(field_mutable:OpqPacket.Event.id)
  return id_;
}
 ::OpqPacket_DeviceId* OpqPacket_Event::release_id() {
  clear_has_id();
  ::OpqPacket_DeviceId* temp = id_;
  id_ = NULL;
  return temp;
}
 void OpqPacket_Event::set_allocated_id(::OpqPacket_DeviceId* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:OpqPacket.Event.id)
}

// optional int32 secondsSinceEpoch = 2;
 bool OpqPacket_Event::has_secondssinceepoch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void OpqPacket_Event::set_has_secondssinceepoch() {
  _has_bits_[0] |= 0x00000002u;
}
 void OpqPacket_Event::clear_has_secondssinceepoch() {
  _has_bits_[0] &= ~0x00000002u;
}
 void OpqPacket_Event::clear_secondssinceepoch() {
  secondssinceepoch_ = 0;
  clear_has_secondssinceepoch();
}
 ::google::protobuf::int32 OpqPacket_Event::secondssinceepoch() const {
  // @@protoc_insertion_point(field_get:OpqPacket.Event.secondsSinceEpoch)
  return secondssinceepoch_;
}
 void OpqPacket_Event::set_secondssinceepoch(::google::protobuf::int32 value) {
  set_has_secondssinceepoch();
  secondssinceepoch_ = value;
  // @@protoc_insertion_point(field_set:OpqPacket.Event.secondsSinceEpoch)
}

// optional int32 cyclcesSinceSecond = 3;
 bool OpqPacket_Event::has_cyclcessincesecond() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void OpqPacket_Event::set_has_cyclcessincesecond() {
  _has_bits_[0] |= 0x00000004u;
}
 void OpqPacket_Event::clear_has_cyclcessincesecond() {
  _has_bits_[0] &= ~0x00000004u;
}
 void OpqPacket_Event::clear_cyclcessincesecond() {
  cyclcessincesecond_ = 0;
  clear_has_cyclcessincesecond();
}
 ::google::protobuf::int32 OpqPacket_Event::cyclcessincesecond() const {
  // @@protoc_insertion_point(field_get:OpqPacket.Event.cyclcesSinceSecond)
  return cyclcessincesecond_;
}
 void OpqPacket_Event::set_cyclcessincesecond(::google::protobuf::int32 value) {
  set_has_cyclcessincesecond();
  cyclcessincesecond_ = value;
  // @@protoc_insertion_point(field_set:OpqPacket.Event.cyclcesSinceSecond)
}

// optional .OpqPacket.EventType eventType = 4;
 bool OpqPacket_Event::has_eventtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void OpqPacket_Event::set_has_eventtype() {
  _has_bits_[0] |= 0x00000008u;
}
 void OpqPacket_Event::clear_has_eventtype() {
  _has_bits_[0] &= ~0x00000008u;
}
 void OpqPacket_Event::clear_eventtype() {
  eventtype_ = 0;
  clear_has_eventtype();
}
 ::OpqPacket_EventType OpqPacket_Event::eventtype() const {
  // @@protoc_insertion_point(field_get:OpqPacket.Event.eventType)
  return static_cast< ::OpqPacket_EventType >(eventtype_);
}
 void OpqPacket_Event::set_eventtype(::OpqPacket_EventType value) {
  assert(::OpqPacket_EventType_IsValid(value));
  set_has_eventtype();
  eventtype_ = value;
  // @@protoc_insertion_point(field_set:OpqPacket.Event.eventType)
}

// repeated int32 waveform = 5;
 int OpqPacket_Event::waveform_size() const {
  return waveform_.size();
}
 void OpqPacket_Event::clear_waveform() {
  waveform_.Clear();
}
 ::google::protobuf::int32 OpqPacket_Event::waveform(int index) const {
  // @@protoc_insertion_point(field_get:OpqPacket.Event.waveform)
  return waveform_.Get(index);
}
 void OpqPacket_Event::set_waveform(int index, ::google::protobuf::int32 value) {
  waveform_.Set(index, value);
  // @@protoc_insertion_point(field_set:OpqPacket.Event.waveform)
}
 void OpqPacket_Event::add_waveform(::google::protobuf::int32 value) {
  waveform_.Add(value);
  // @@protoc_insertion_point(field_add:OpqPacket.Event.waveform)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
OpqPacket_Event::waveform() const {
  // @@protoc_insertion_point(field_list:OpqPacket.Event.waveform)
  return waveform_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
OpqPacket_Event::mutable_waveform() {
  // @@protoc_insertion_point(field_mutable_list:OpqPacket.Event.waveform)
  return &waveform_;
}

// -------------------------------------------------------------------

// OpqPacket_Heartbeat

// optional .OpqPacket.DeviceId deviceId = 1;
 bool OpqPacket_Heartbeat::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void OpqPacket_Heartbeat::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
 void OpqPacket_Heartbeat::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void OpqPacket_Heartbeat::clear_deviceid() {
  if (deviceid_ != NULL) deviceid_->::OpqPacket_DeviceId::Clear();
  clear_has_deviceid();
}
 const ::OpqPacket_DeviceId& OpqPacket_Heartbeat::deviceid() const {
  // @@protoc_insertion_point(field_get:OpqPacket.Heartbeat.deviceId)
  return deviceid_ != NULL ? *deviceid_ : *default_instance_->deviceid_;
}
 ::OpqPacket_DeviceId* OpqPacket_Heartbeat::mutable_deviceid() {
  set_has_deviceid();
  if (deviceid_ == NULL) {
    deviceid_ = new ::OpqPacket_DeviceId;
  }
  // @@protoc_insertion_point(field_mutable:OpqPacket.Heartbeat.deviceId)
  return deviceid_;
}
 ::OpqPacket_DeviceId* OpqPacket_Heartbeat::release_deviceid() {
  clear_has_deviceid();
  ::OpqPacket_DeviceId* temp = deviceid_;
  deviceid_ = NULL;
  return temp;
}
 void OpqPacket_Heartbeat::set_allocated_deviceid(::OpqPacket_DeviceId* deviceid) {
  delete deviceid_;
  deviceid_ = deviceid;
  if (deviceid) {
    set_has_deviceid();
  } else {
    clear_has_deviceid();
  }
  // @@protoc_insertion_point(field_set_allocated:OpqPacket.Heartbeat.deviceId)
}

// optional double rms = 2;
 bool OpqPacket_Heartbeat::has_rms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void OpqPacket_Heartbeat::set_has_rms() {
  _has_bits_[0] |= 0x00000002u;
}
 void OpqPacket_Heartbeat::clear_has_rms() {
  _has_bits_[0] &= ~0x00000002u;
}
 void OpqPacket_Heartbeat::clear_rms() {
  rms_ = 0;
  clear_has_rms();
}
 double OpqPacket_Heartbeat::rms() const {
  // @@protoc_insertion_point(field_get:OpqPacket.Heartbeat.rms)
  return rms_;
}
 void OpqPacket_Heartbeat::set_rms(double value) {
  set_has_rms();
  rms_ = value;
  // @@protoc_insertion_point(field_set:OpqPacket.Heartbeat.rms)
}

// optional double frequency = 3;
 bool OpqPacket_Heartbeat::has_frequency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void OpqPacket_Heartbeat::set_has_frequency() {
  _has_bits_[0] |= 0x00000004u;
}
 void OpqPacket_Heartbeat::clear_has_frequency() {
  _has_bits_[0] &= ~0x00000004u;
}
 void OpqPacket_Heartbeat::clear_frequency() {
  frequency_ = 0;
  clear_has_frequency();
}
 double OpqPacket_Heartbeat::frequency() const {
  // @@protoc_insertion_point(field_get:OpqPacket.Heartbeat.frequency)
  return frequency_;
}
 void OpqPacket_Heartbeat::set_frequency(double value) {
  set_has_frequency();
  frequency_ = value;
  // @@protoc_insertion_point(field_set:OpqPacket.Heartbeat.frequency)
}

// optional double thd = 4;
 bool OpqPacket_Heartbeat::has_thd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void OpqPacket_Heartbeat::set_has_thd() {
  _has_bits_[0] |= 0x00000008u;
}
 void OpqPacket_Heartbeat::clear_has_thd() {
  _has_bits_[0] &= ~0x00000008u;
}
 void OpqPacket_Heartbeat::clear_thd() {
  thd_ = 0;
  clear_has_thd();
}
 double OpqPacket_Heartbeat::thd() const {
  // @@protoc_insertion_point(field_get:OpqPacket.Heartbeat.thd)
  return thd_;
}
 void OpqPacket_Heartbeat::set_thd(double value) {
  set_has_thd();
  thd_ = value;
  // @@protoc_insertion_point(field_set:OpqPacket.Heartbeat.thd)
}

// repeated uint64 synch = 5;
 int OpqPacket_Heartbeat::synch_size() const {
  return synch_.size();
}
 void OpqPacket_Heartbeat::clear_synch() {
  synch_.Clear();
}
 ::google::protobuf::uint64 OpqPacket_Heartbeat::synch(int index) const {
  // @@protoc_insertion_point(field_get:OpqPacket.Heartbeat.synch)
  return synch_.Get(index);
}
 void OpqPacket_Heartbeat::set_synch(int index, ::google::protobuf::uint64 value) {
  synch_.Set(index, value);
  // @@protoc_insertion_point(field_set:OpqPacket.Heartbeat.synch)
}
 void OpqPacket_Heartbeat::add_synch(::google::protobuf::uint64 value) {
  synch_.Add(value);
  // @@protoc_insertion_point(field_add:OpqPacket.Heartbeat.synch)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
OpqPacket_Heartbeat::synch() const {
  // @@protoc_insertion_point(field_list:OpqPacket.Heartbeat.synch)
  return synch_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
OpqPacket_Heartbeat::mutable_synch() {
  // @@protoc_insertion_point(field_mutable_list:OpqPacket.Heartbeat.synch)
  return &synch_;
}

// -------------------------------------------------------------------

// OpqPacket_Cmd

// optional .OpqPacket.DeviceId id = 1;
 bool OpqPacket_Cmd::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void OpqPacket_Cmd::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
 void OpqPacket_Cmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
 void OpqPacket_Cmd::clear_id() {
  if (id_ != NULL) id_->::OpqPacket_DeviceId::Clear();
  clear_has_id();
}
 const ::OpqPacket_DeviceId& OpqPacket_Cmd::id() const {
  // @@protoc_insertion_point(field_get:OpqPacket.Cmd.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
 ::OpqPacket_DeviceId* OpqPacket_Cmd::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::OpqPacket_DeviceId;
  }
  // @@protoc_insertion_point(field_mutable:OpqPacket.Cmd.id)
  return id_;
}
 ::OpqPacket_DeviceId* OpqPacket_Cmd::release_id() {
  clear_has_id();
  ::OpqPacket_DeviceId* temp = id_;
  id_ = NULL;
  return temp;
}
 void OpqPacket_Cmd::set_allocated_id(::OpqPacket_DeviceId* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:OpqPacket.Cmd.id)
}

// optional .OpqPacket.CmdType cmdType = 2;
 bool OpqPacket_Cmd::has_cmdtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void OpqPacket_Cmd::set_has_cmdtype() {
  _has_bits_[0] |= 0x00000002u;
}
 void OpqPacket_Cmd::clear_has_cmdtype() {
  _has_bits_[0] &= ~0x00000002u;
}
 void OpqPacket_Cmd::clear_cmdtype() {
  cmdtype_ = 0;
  clear_has_cmdtype();
}
 ::OpqPacket_CmdType OpqPacket_Cmd::cmdtype() const {
  // @@protoc_insertion_point(field_get:OpqPacket.Cmd.cmdType)
  return static_cast< ::OpqPacket_CmdType >(cmdtype_);
}
 void OpqPacket_Cmd::set_cmdtype(::OpqPacket_CmdType value) {
  assert(::OpqPacket_CmdType_IsValid(value));
  set_has_cmdtype();
  cmdtype_ = value;
  // @@protoc_insertion_point(field_set:OpqPacket.Cmd.cmdType)
}

// optional string message = 3;
 bool OpqPacket_Cmd::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void OpqPacket_Cmd::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
 void OpqPacket_Cmd::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
 void OpqPacket_Cmd::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
 const ::std::string& OpqPacket_Cmd::message() const {
  // @@protoc_insertion_point(field_get:OpqPacket.Cmd.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpqPacket_Cmd::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OpqPacket.Cmd.message)
}
 void OpqPacket_Cmd::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OpqPacket.Cmd.message)
}
 void OpqPacket_Cmd::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OpqPacket.Cmd.message)
}
 ::std::string* OpqPacket_Cmd::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:OpqPacket.Cmd.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OpqPacket_Cmd::release_message() {
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpqPacket_Cmd::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:OpqPacket.Cmd.message)
}

// -------------------------------------------------------------------

// OpqPacket_CmdResp

// optional .OpqPacket.DeviceId id = 1;
 bool OpqPacket_CmdResp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void OpqPacket_CmdResp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
 void OpqPacket_CmdResp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
 void OpqPacket_CmdResp::clear_id() {
  if (id_ != NULL) id_->::OpqPacket_DeviceId::Clear();
  clear_has_id();
}
 const ::OpqPacket_DeviceId& OpqPacket_CmdResp::id() const {
  // @@protoc_insertion_point(field_get:OpqPacket.CmdResp.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
 ::OpqPacket_DeviceId* OpqPacket_CmdResp::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::OpqPacket_DeviceId;
  }
  // @@protoc_insertion_point(field_mutable:OpqPacket.CmdResp.id)
  return id_;
}
 ::OpqPacket_DeviceId* OpqPacket_CmdResp::release_id() {
  clear_has_id();
  ::OpqPacket_DeviceId* temp = id_;
  id_ = NULL;
  return temp;
}
 void OpqPacket_CmdResp::set_allocated_id(::OpqPacket_DeviceId* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:OpqPacket.CmdResp.id)
}

// optional string message = 2;
 bool OpqPacket_CmdResp::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void OpqPacket_CmdResp::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
 void OpqPacket_CmdResp::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
 void OpqPacket_CmdResp::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
 const ::std::string& OpqPacket_CmdResp::message() const {
  // @@protoc_insertion_point(field_get:OpqPacket.CmdResp.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpqPacket_CmdResp::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OpqPacket.CmdResp.message)
}
 void OpqPacket_CmdResp::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OpqPacket.CmdResp.message)
}
 void OpqPacket_CmdResp::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OpqPacket.CmdResp.message)
}
 ::std::string* OpqPacket_CmdResp::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:OpqPacket.CmdResp.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OpqPacket_CmdResp::release_message() {
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpqPacket_CmdResp::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:OpqPacket.CmdResp.message)
}

// -------------------------------------------------------------------

// OpqPacket_DeviceId

// optional int64 deviceId = 1;
 bool OpqPacket_DeviceId::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void OpqPacket_DeviceId::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
 void OpqPacket_DeviceId::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
 void OpqPacket_DeviceId::clear_deviceid() {
  deviceid_ = GOOGLE_LONGLONG(0);
  clear_has_deviceid();
}
 ::google::protobuf::int64 OpqPacket_DeviceId::deviceid() const {
  // @@protoc_insertion_point(field_get:OpqPacket.DeviceId.deviceId)
  return deviceid_;
}
 void OpqPacket_DeviceId::set_deviceid(::google::protobuf::int64 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:OpqPacket.DeviceId.deviceId)
}

// optional string deviceKey = 2;
 bool OpqPacket_DeviceId::has_devicekey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void OpqPacket_DeviceId::set_has_devicekey() {
  _has_bits_[0] |= 0x00000002u;
}
 void OpqPacket_DeviceId::clear_has_devicekey() {
  _has_bits_[0] &= ~0x00000002u;
}
 void OpqPacket_DeviceId::clear_devicekey() {
  devicekey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicekey();
}
 const ::std::string& OpqPacket_DeviceId::devicekey() const {
  // @@protoc_insertion_point(field_get:OpqPacket.DeviceId.deviceKey)
  return devicekey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpqPacket_DeviceId::set_devicekey(const ::std::string& value) {
  set_has_devicekey();
  devicekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OpqPacket.DeviceId.deviceKey)
}
 void OpqPacket_DeviceId::set_devicekey(const char* value) {
  set_has_devicekey();
  devicekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OpqPacket.DeviceId.deviceKey)
}
 void OpqPacket_DeviceId::set_devicekey(const char* value, size_t size) {
  set_has_devicekey();
  devicekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OpqPacket.DeviceId.deviceKey)
}
 ::std::string* OpqPacket_DeviceId::mutable_devicekey() {
  set_has_devicekey();
  // @@protoc_insertion_point(field_mutable:OpqPacket.DeviceId.deviceKey)
  return devicekey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OpqPacket_DeviceId::release_devicekey() {
  clear_has_devicekey();
  return devicekey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpqPacket_DeviceId::set_allocated_devicekey(::std::string* devicekey) {
  if (devicekey != NULL) {
    set_has_devicekey();
  } else {
    clear_has_devicekey();
  }
  devicekey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicekey);
  // @@protoc_insertion_point(field_set_allocated:OpqPacket.DeviceId.deviceKey)
}

// -------------------------------------------------------------------

// OpqPacket

// optional .OpqPacket.Event event = 1;
 bool OpqPacket::has_event() const {
  return PacketType_case() == kEvent;
}
 void OpqPacket::set_has_event() {
  _oneof_case_[0] = kEvent;
}
 void OpqPacket::clear_event() {
  if (has_event()) {
    delete PacketType_.event_;
    clear_has_PacketType();
  }
}
 const ::OpqPacket_Event& OpqPacket::event() const {
  // @@protoc_insertion_point(field_get:OpqPacket.event)
  return has_event() ? *PacketType_.event_
                      : ::OpqPacket_Event::default_instance();
}
 ::OpqPacket_Event* OpqPacket::mutable_event() {
  if (!has_event()) {
    clear_PacketType();
    set_has_event();
    PacketType_.event_ = new ::OpqPacket_Event;
  }
  // @@protoc_insertion_point(field_mutable:OpqPacket.event)
  return PacketType_.event_;
}
 ::OpqPacket_Event* OpqPacket::release_event() {
  if (has_event()) {
    clear_has_PacketType();
    ::OpqPacket_Event* temp = PacketType_.event_;
    PacketType_.event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpqPacket::set_allocated_event(::OpqPacket_Event* event) {
  clear_PacketType();
  if (event) {
    set_has_event();
    PacketType_.event_ = event;
  }
  // @@protoc_insertion_point(field_set_allocated:OpqPacket.event)
}

// optional .OpqPacket.Heartbeat heartbeat = 2;
 bool OpqPacket::has_heartbeat() const {
  return PacketType_case() == kHeartbeat;
}
 void OpqPacket::set_has_heartbeat() {
  _oneof_case_[0] = kHeartbeat;
}
 void OpqPacket::clear_heartbeat() {
  if (has_heartbeat()) {
    delete PacketType_.heartbeat_;
    clear_has_PacketType();
  }
}
 const ::OpqPacket_Heartbeat& OpqPacket::heartbeat() const {
  // @@protoc_insertion_point(field_get:OpqPacket.heartbeat)
  return has_heartbeat() ? *PacketType_.heartbeat_
                      : ::OpqPacket_Heartbeat::default_instance();
}
 ::OpqPacket_Heartbeat* OpqPacket::mutable_heartbeat() {
  if (!has_heartbeat()) {
    clear_PacketType();
    set_has_heartbeat();
    PacketType_.heartbeat_ = new ::OpqPacket_Heartbeat;
  }
  // @@protoc_insertion_point(field_mutable:OpqPacket.heartbeat)
  return PacketType_.heartbeat_;
}
 ::OpqPacket_Heartbeat* OpqPacket::release_heartbeat() {
  if (has_heartbeat()) {
    clear_has_PacketType();
    ::OpqPacket_Heartbeat* temp = PacketType_.heartbeat_;
    PacketType_.heartbeat_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpqPacket::set_allocated_heartbeat(::OpqPacket_Heartbeat* heartbeat) {
  clear_PacketType();
  if (heartbeat) {
    set_has_heartbeat();
    PacketType_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_set_allocated:OpqPacket.heartbeat)
}

// optional .OpqPacket.Cmd cmd = 3;
 bool OpqPacket::has_cmd() const {
  return PacketType_case() == kCmd;
}
 void OpqPacket::set_has_cmd() {
  _oneof_case_[0] = kCmd;
}
 void OpqPacket::clear_cmd() {
  if (has_cmd()) {
    delete PacketType_.cmd_;
    clear_has_PacketType();
  }
}
 const ::OpqPacket_Cmd& OpqPacket::cmd() const {
  // @@protoc_insertion_point(field_get:OpqPacket.cmd)
  return has_cmd() ? *PacketType_.cmd_
                      : ::OpqPacket_Cmd::default_instance();
}
 ::OpqPacket_Cmd* OpqPacket::mutable_cmd() {
  if (!has_cmd()) {
    clear_PacketType();
    set_has_cmd();
    PacketType_.cmd_ = new ::OpqPacket_Cmd;
  }
  // @@protoc_insertion_point(field_mutable:OpqPacket.cmd)
  return PacketType_.cmd_;
}
 ::OpqPacket_Cmd* OpqPacket::release_cmd() {
  if (has_cmd()) {
    clear_has_PacketType();
    ::OpqPacket_Cmd* temp = PacketType_.cmd_;
    PacketType_.cmd_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpqPacket::set_allocated_cmd(::OpqPacket_Cmd* cmd) {
  clear_PacketType();
  if (cmd) {
    set_has_cmd();
    PacketType_.cmd_ = cmd;
  }
  // @@protoc_insertion_point(field_set_allocated:OpqPacket.cmd)
}

// optional .OpqPacket.CmdResp cmdResp = 4;
 bool OpqPacket::has_cmdresp() const {
  return PacketType_case() == kCmdResp;
}
 void OpqPacket::set_has_cmdresp() {
  _oneof_case_[0] = kCmdResp;
}
 void OpqPacket::clear_cmdresp() {
  if (has_cmdresp()) {
    delete PacketType_.cmdresp_;
    clear_has_PacketType();
  }
}
 const ::OpqPacket_CmdResp& OpqPacket::cmdresp() const {
  // @@protoc_insertion_point(field_get:OpqPacket.cmdResp)
  return has_cmdresp() ? *PacketType_.cmdresp_
                      : ::OpqPacket_CmdResp::default_instance();
}
 ::OpqPacket_CmdResp* OpqPacket::mutable_cmdresp() {
  if (!has_cmdresp()) {
    clear_PacketType();
    set_has_cmdresp();
    PacketType_.cmdresp_ = new ::OpqPacket_CmdResp;
  }
  // @@protoc_insertion_point(field_mutable:OpqPacket.cmdResp)
  return PacketType_.cmdresp_;
}
 ::OpqPacket_CmdResp* OpqPacket::release_cmdresp() {
  if (has_cmdresp()) {
    clear_has_PacketType();
    ::OpqPacket_CmdResp* temp = PacketType_.cmdresp_;
    PacketType_.cmdresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpqPacket::set_allocated_cmdresp(::OpqPacket_CmdResp* cmdresp) {
  clear_PacketType();
  if (cmdresp) {
    set_has_cmdresp();
    PacketType_.cmdresp_ = cmdresp;
  }
  // @@protoc_insertion_point(field_set_allocated:OpqPacket.cmdResp)
}

 bool OpqPacket::has_PacketType() const {
  return PacketType_case() != PACKETTYPE_NOT_SET;
}
 void OpqPacket::clear_has_PacketType() {
  _oneof_case_[0] = PACKETTYPE_NOT_SET;
}
OpqPacket::PacketTypeCase OpqPacket::PacketType_case() const {
  return OpqPacket::PacketTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
